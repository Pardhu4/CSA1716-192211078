from collections import deque
class State:
    def __init__(self, x, y, action="Initial", prev=None):
        self.x = x  
        self.y = y  
        self.action = action  
        self.prev = prev  # Previous state
def pour(state, jug1_capacity, jug2_capacity):
    if state.x == 0:  
        return State(0, state.y, action="pour A->B", prev=state)
    elif state.y == jug2_capacity: 
        return State(state.x, 0, action="pour A->B", prev=state)
    else:
        amount = min(state.x, jug2_capacity - state.y)  
        return State(state.x - amount, state.y + amount, action="pour A->B", prev=state)
def waterjug(start, end, jug1_capacity, jug2_capacity):
    if start == end:  # If the jugs are already in the desired state
        return start
    visited = set()  # Set to keep track of visited states
    queue = deque([start])  # Queue to perform BFS
    while queue:
        state = queue.popleft()  # Get the current state from the queue
        visited.add((state.x, state.y))  # Mark the current state as visited
        next_states = [pour(state, jug1_capacity, jug2_capacity),
                       pour(State(state.y, state.x, action="pour B->A", prev=state),
                            jug2_capacity, jug1_capacity),
                       State(jug1_capacity, state.y, action="fill A", prev=state),
                       State(state.x, jug2_capacity, action="fill B", prev=state),
                       State(0, state.y, action="empty A", prev=state),
                       State(state.x, 0, action="empty B", prev=state)]
        for next_state in next_states:
            if (next_state.x, next_state.y) == (end.x, end.y):
                return next_state
            if (next_state.x, next_state.y) not in visited:
                queue.append(next_state)
    return None  # If no solution is found
jug1_capacity = 4
jug2_capacity = 3
start_state = State(0, 0)
end_state = State(2, 0)
solution = waterjug(start_state, end_state, jug1_capacity, jug2_capacity)
if solution:
    path = []
    while solution:
        path.append((solution.x, solution.y, solution.action))
        solution = solution.prev
    path.reverse()
    for i, (x, y, action) in enumerate(path):
        print(f"Step {i+1}: {action}, Jugs: (A={x}, B={y})")
else:
    print("No solution exists.")
